<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlternateNameMissing" xml:space="preserve">
    <value>You must enter a alternate name, or remove the checkmark</value>
    <comment>A message displayed when the user has not entered an alternate name for a resource</comment>
  </data>
  <data name="CancelConfirmation" xml:space="preserve">
    <value>Do you want to cancel?</value>
    <comment>A confirmation message displayed when the user presses the cancel button</comment>
  </data>
  <data name="ContentFileMissing" xml:space="preserve">
    <value>The content file does not exist</value>
    <comment>A message displayed when the user selects a non-existing file</comment>
  </data>
  <data name="DeleteConfirmation" xml:space="preserve">
    <value>Do you want to remove the selected item?</value>
    <comment>A confirmation message displayed when deleting a resource</comment>
  </data>
  <data name="FileCopyError" xml:space="preserve">
    <value>An error occured while copying file: {0}</value>
    <comment>A message displayed when a file copy fails</comment>
  </data>
  <data name="FileMissingError" xml:space="preserve">
    <value>Failed to find file {0} in archive</value>
    <comment>An error message that is displayed if a file is missing in a package</comment>
  </data>
  <data name="FilenameRelationInternalError" xml:space="preserve">
    <value>Filename "{0}" is not relative to "{1}"</value>
    <comment>An internal error that is displayed when a filename inconsistency is encountered</comment>
  </data>
  <data name="FilenameValidationError" xml:space="preserve">
    <value>Failed to validate the filenames: {0}</value>
    <comment>A message displayed when the user enters an invalid filename</comment>
  </data>
  <data name="FiletypeAll" xml:space="preserve">
    <value>All files ({0})</value>
    <comment>The text displayed when browsing for all file types</comment>
  </data>
  <data name="FiletypeMGP" xml:space="preserve">
    <value>MapGuide Packages ({0})</value>
    <comment>The text displayed when browsing for MGP files</comment>
  </data>
  <data name="FiletypeZip" xml:space="preserve">
    <value>Zip files ({0})</value>
    <comment>The text displayed when browsing for zip files</comment>
  </data>
  <data name="HeaderError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="HeaderFileMissing" xml:space="preserve">
    <value>The header file does not exist</value>
    <comment>A message displayed when the user selects a non-existing file</comment>
  </data>
  <data name="HeaderOperation" xml:space="preserve">
    <value>Operation</value>
  </data>
  <data name="HeaderResourceId" xml:space="preserve">
    <value>Resource ID</value>
  </data>
  <data name="InvalidPackageFileError" xml:space="preserve">
    <value>Failed to locate file MgResourcePackageManifest.xml in zip file. Most likely the file is not a MapGuide package.</value>
    <comment>An error message that is displayed if the package file is invalid</comment>
  </data>
  <data name="NewFolder" xml:space="preserve">
    <value>New folder</value>
    <comment>The default name of a new folder</comment>
  </data>
  <data name="PackageBuildError" xml:space="preserve">
    <value>An error occured while building package: {0}</value>
    <comment>A message displayed when the package creation fails</comment>
  </data>
  <data name="PackageOperationsFailed" xml:space="preserve">
    <value>{0} Package Operations Failed</value>
  </data>
  <data name="PackageOperationsSkipped" xml:space="preserve">
    <value>{0} Package Operations Skipped</value>
  </data>
  <data name="PackageOperationsSucceeded" xml:space="preserve">
    <value>{0} Package Operations Succeeded</value>
  </data>
  <data name="ProgressCompressed" xml:space="preserve">
    <value>Compressed</value>
    <comment>A progress message that is displayed when the files are compressed</comment>
  </data>
  <data name="ProgressCompressing" xml:space="preserve">
    <value>Compressing ...</value>
    <comment>A progress message that is displayed while compressing files</comment>
  </data>
  <data name="ProgressCompressing1" xml:space="preserve">
    <value>Compressing files ...</value>
    <comment>A message that is displayed while compressing files</comment>
  </data>
  <data name="ProgressDone" xml:space="preserve">
    <value>Done</value>
    <comment>A progress message that is displayed when the operation is done</comment>
  </data>
  <data name="ProgressReadingPackage" xml:space="preserve">
    <value>Reading package contents ...</value>
    <comment>A message that is displayed while reading the package contents</comment>
  </data>
  <data name="ProgressSetResource" xml:space="preserve">
    <value>Set Resource: {0} ({1:0.00}%)</value>
  </data>
  <data name="ProgressSetResourceData" xml:space="preserve">
    <value>Set Resource Data: {0} ({1:0.00}%)</value>
  </data>
  <data name="ProgressUpdatedReferences" xml:space="preserve">
    <value>Updated references</value>
    <comment>A progress message that is displayed when references are updated</comment>
  </data>
  <data name="ProgressUpdatedResources" xml:space="preserve">
    <value>Updated resources</value>
    <comment>A progress message that is displayed when resources are updated</comment>
  </data>
  <data name="ProgressUpdatingReferences" xml:space="preserve">
    <value>Updating references ...</value>
    <comment>A progress message that is displayed while updating references</comment>
  </data>
  <data name="ProgressUpdatingReferences1" xml:space="preserve">
    <value>Updating resource references ...</value>
    <comment>A message that is displayed while updating resource references</comment>
  </data>
  <data name="ProgressUpdatingResources" xml:space="preserve">
    <value>Updating resources ...</value>
    <comment>A progress message that is displayed while updating resources</comment>
  </data>
  <data name="ProgressUploading" xml:space="preserve">
    <value>Uploading, {0:0.00} of {1:0.00} mb ...</value>
    <comment>A message that is displayed while uploading the file</comment>
  </data>
  <data name="ProgressWaitingForServer" xml:space="preserve">
    <value>Awating server processing ...</value>
    <comment>A message that is displayed after the file is uploaded, and the server restores the file</comment>
  </data>
  <data name="SelectPackageFile" xml:space="preserve">
    <value>Select the package file to edit</value>
    <comment>The title of the dialog that the is used to pick the package file to edit</comment>
  </data>
  <data name="TitleUploading" xml:space="preserve">
    <value>Uploading Package</value>
  </data>
  <data name="UploadPackageDialogTitle" xml:space="preserve">
    <value>Select the package to upload</value>
    <comment>The title for the file browse dialog when uploading a package</comment>
  </data>
</root>
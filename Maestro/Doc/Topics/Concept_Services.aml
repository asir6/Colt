<?xml version="1.0" encoding="utf-8"?>
<topic id="c6f8002d-fa64-48ee-902c-a6939bc6f86c" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>Service Interfaces</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="ServiceInterfacesOverview">
      <title>Overview</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
        The MapGuide Server exposes many different pieces of functionality either as
        part of the official API, or through the http mapagent. Such functionality is 
        grouped and represented in the form of service interfaces
        </para>
        <para>
        The Maestro API offers the following services:
        </para>
		<list class="bullet">
		  <listItem><para><codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.Services.IResourceService</codeEntityReference> for managing resources</para></listItem>
		  <listItem><para><codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.Services.IFeatureService</codeEntityReference> for querying feature data</para></listItem>
		  <listItem><para><codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.Services.IDrawingService</codeEntityReference> for working with DWF-based Drawing Sources</para></listItem>
		  <listItem><para><codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.Services.IFusionService</codeEntityReference> for assisting in the construction of Fusion flexible layouts</para></listItem>
		  <listItem><para><codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.Services.IMappingService</codeEntityReference> for interacting with the <codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.Mapping.RuntimeMap</codeEntityReference></para></listItem>
		  <listItem><para><codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.Services.ISiteService</codeEntityReference> for querying information about a MapGuide Server</para></listItem>
		  <listItem><para><codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.Services.ITileService</codeEntityReference> for the rendering and pre-caching of Map Tile Images</para></listItem>
		</list>
      </content>
    </section>
    <section address="ServiceInterfacesAvailability">
      <title>Service availability between various connection implementations</title>
      <content>
      No implementation of <codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.IServerConnection</codeEntityReference> is a level
      playing field. Certain implementations may not provide certain services. In such cases, you can
      use the <codeEntityReference qualifyHint="false">P:OSGeo.MapGuide.MaestroAPI.IServerConnection.Capabilities</codeEntityReference> property to
      check what services are provided by your particular connection implementation.
      </content>
      <content>
      However, all implementations are <legacyBold>guaranteed</legacyBold> to implement at a bare minimum, the
      Resource and Feature Service interfaces. As such, these services are available through the respective
      <codeEntityReference qualifyHint="false">P:OSGeo.MapGuide.MaestroAPI.IServerConnection.ResourceService</codeEntityReference> and 
      <codeEntityReference qualifyHint="false">P:OSGeo.MapGuide.MaestroAPI.IServerConnection.FeatureService</codeEntityReference>
      top-level properties
      </content>
      <content>
      Other services are accessible via the <codeEntityReference qualifyHint="false" autoUpgrade="true">M:OSGeo.MapGuide.MaestroAPI.IServerConnection.GetService(System.Int32)</codeEntityReference>
      method. You will need to cast the returned result to the appropriate interface (all interfaces inherit from <codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.Services.IService</codeEntityReference>)
      </content>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
<?xml version="1.0" encoding="utf-8"?>
<topic id="af30df93-30ad-4a67-a074-661e04434d01" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>The Resource Object Model</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="ResourcesOverview">
      <title>Overview</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
        Unlike the official MapGuide API, all resources in the Maestro API are strongly-typed objects
        and not blobs of arbitrary XML content that needs to be manually processed and manipulated by your
        application.
        </para>
        <para>
        All XML resource elements are represented as classes. These classes are automatically generated
        from the respective XSD used to validate this resource content. Because a resource can have many
        different schema versions, these classes implement a set of common interfaces that reside under the
        OSGeo.MapGuide.ObjectModels namespace. This has 2 benefits:
        </para>
		<list class="ordered">
		  <listItem><para>It prevents collision of the autogenerated classes across different versions. The generated classes are partitioned under internal version-specific namespaces</para></listItem>
		  <listItem><para>By working against the resource interfaces, your code can work with any supported schema version of a given resource. In addition, adding support for newer schema revisions requires no changes on your side</para></listItem>
		</list>
		<para>
		When working with the Maestro API, <legacyBold>always write code against the resource interfaces</legacyBold>. Despite being public types and included in the Maestro API assemblies, never write code against the
		autogenerated classes because multiple versions of them exist. It is for this reason that the autogenerated classes are not included in this API documentation.
		</para>
      </content>
    </section>
	<section address="ResourceInterfaceVersions">
      <title>Resource Interface Versions</title>
      <content>
        <para>
        Each schema revision introduces new elements, which require new resource interfaces in the Maestro API that map to these new elements.
        In such cases, we adopt the approach of COM interfaces and create a new interface that extends the old one
        and incorporates the methods and properties to handle the new elements. The new interface is suffixed with a number
        that increases with each new schema revision
        </para>
        <para>
        For example, the <codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.WebLayout.IWebLayout</codeEntityReference> interface represents the Web Layout resource (version 1.0.0). The
        1.1.0 schema introduces a new PingServer element (to prevent viewer session expiry). To tap into this newly exposed element provided by this schema, a 
        <codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.WebLayout.IWebLayout2</codeEntityReference> interface included, which extends the original
        <codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.WebLayout.IWebLayout</codeEntityReference> interface and includes the new <codeEntityReference qualifyHint="false">P:OSGeo.MapGuide.ObjectModels.WebLayout.IWebLayout2.EnablePingServer</codeEntityReference>
        property. All other resource interfaces follow the same pattern of design.
        </para>
		<para>
		Of course, due to the large number of schema revisions made since the very first release of MapGuide Open Source, it is a bit difficult to keep track of all
		the relevant schema revisions and the resource interfaces that are affected. The following table shows which resource schema versions a newer resource interface
		is applicable to:
		</para>
		<table>
		  <tableHeader>
		    <row>
		      <entry><para>Resource Type</para></entry>
		      <entry><para>Interfaces introduced for this version (also applicable for versions after it)</para></entry>
		    </row>
		  </tableHeader>
		  <row>
		    <entry><para>Layer Definition (v1.1.0)</para></entry>
		    <entry>
		    	<para>
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.IVectorScaleRange2</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.ICompositeTypeStyle</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.ICompositeRule</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.IStroke2</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.ElevationTypeType</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.IElevationSettings</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.SymbolDefinition.ISymbolInstance</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.ICompositeSymbolization</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.IParameterOverride</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.IParameterOverrideCollection</codeEntityReference>
		    	</para>
		    </entry>
		  </row>
		  <row>
		    <entry><para>Layer Definition (v1.2.0)</para></entry>
		    <entry>
		    	<para>
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.ISymbolInstance2</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.IParameterOverride2</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.IThemeLabel</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.UsageContextType</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.GeometryContextType</codeEntityReference>
		    	</para>
		    </entry>
		  </row>
		  <row>
		    <entry><para>Layer Definition (v1.3.0)</para></entry>
		    <entry>
		    	<para>
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.ICompositeTypeStyle2</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.IAreaVectorStyle2</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.ILineVectorStyle2</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.IPointVectorStyle2</codeEntityReference>
		    	</para>
		    </entry>
		  </row>
		  <row>
		    <entry><para>Layer Definition (v2.3.0)</para></entry>
		    <entry>
		    	<para>
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.LayerDefinition.ISubLayerDefinition2</codeEntityReference>
		    	</para>
		    </entry>
		  </row>
		  <row>
		    <entry><para>Map Definition (v2.3.0)</para></entry>
		    <entry>
		    	<para>
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.MapDefinition.IMapDefinition2</codeEntityReference>
		    	</para>
		    </entry>
		  </row>
		  <row>
		    <entry><para>Web Layout (v1.1.0)</para></entry>
		    <entry>
		    	<para>
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.WebLayout.IWebLayout2</codeEntityReference>
		    	</para>
		    </entry>
		  </row>
		  <row>
		    <entry><para>Symbol Definition (v1.1.0)</para></entry>
		    <entry>
		    	<para>
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.SymbolDefinition.ITextGraphic2</codeEntityReference>,
		    	<codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.ObjectModels.SymbolDefinition.DataType2</codeEntityReference>
		    	</para>
		    </entry>
		  </row>
		</table>
		<para>
		To determine whether a given interface is accessible, you can either check the <codeEntityReference qualifyHint="false">P:OSGeo.MapGuide.MaestroAPI.Resource.IVersionedEntity.ResourceVersion</codeEntityReference> and refer
		to this table to see if these interfaces can be casted from their older versions. Or you can utilise language features such as C#'s 
		</para>
      </content>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
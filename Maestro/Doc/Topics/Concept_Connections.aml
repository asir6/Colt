<?xml version="1.0" encoding="utf-8"?>
<topic id="adae6d9e-5445-46a1-b3cc-b3c966f0ee16" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>About Connections</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="ConnectionsOverview">
      <title>Overview</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
        Connections are the primary entry point into the functionality offered by the
        Maestro API. It abstracts away the various methods of interacting with a MapGuide
        Server into a single unified interface
        </para>
        <mediaLink><image xlink:href="ConnectionOverview" placement="center" /></mediaLink>
        <para>
        A connection is represented by the <codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.IServerConnection</codeEntityReference>
        interface. Creating such connections is done via the <codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.ConnectionProviderRegistry</codeEntityReference>
        class. This class uses the ConnectionProviders.xml file to resolve and load the matching
        implementation
        </para>
      </content>
    </section>
    <section address="ConnectionImplementations">
      <title>Known Implementations</title>
      <content>
        <para>
        There are 3 known implementations of the <codeEntityReference qualifyHint="false">T:OSGeo.MapGuide.MaestroAPI.IServerConnection</codeEntityReference> interface:
        </para>
		<list class="bullet">
		  <listItem><para>Maestro.Http: A HTTP implementation (that communicates with the http mapagent)</para></listItem>
		  <listItem><para>Maestro.LocalNative: A Local Native implementation (that wraps the official MapGuide API)</para></listItem>
		  <listItem>
		  	<para>Maestro.Local: A Local implementation (that wraps the <externalLink>
<linkText>mg-desktop</linkText>
<linkAlternateText>mg-desktop homepage</linkAlternateText>
<linkUri>http://trac.osgeo.org/mapguide/wiki/mg-desktop</linkUri>
<linkTarget>_blank</linkTarget>
</externalLink>
 API)	</para>
 		  </listItem>
		</list>
		<para>
		Additional implementations can be registered in the ConnectionProviders.xml file
		</para>
		<para>
		The LocalNative implementation source code is included with this SDK, but requires the official
	    MapGuide API binaries to be also added to your application's directory. As a result this
	    provider is disabled in the ConnectionProviders.xml file by default. The SDK includes a tool
	    to help you build this LocalNative provider. <link xlink:href="d9dae2b2-3191-4a14-a9ee-024d23ef3a76">Click here for more info.</link>
		</para>
		<para>
		The Local implementation is not included with the SDK. The windows version of Maestro
		includes this implementation and you can copy the required files from your Maestro
		installation should you choose to use this implementation.
		</para>
		<para>
		All examples outlined in this guide assume the use of the HTTP implementation (Maestro.Http)
		</para>
      </content>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
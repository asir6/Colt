<?xml version="1.0" encoding="utf-8"?>
<topic id="a6602b0d-a00e-4e5b-838e-e61e22c7034b" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>The ProviderTemplate tool allows you to build your own LocalNative provider against your specific version of MapGuide/AIMS</para>
      <para><legacyBold>NOTE: These instructions below assume the SDK directory structure is not modified. Do not change this directory structure or these instructions below may not work</legacyBold></para>
    </introduction>
    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <procedure>
      <title>How to use the tool</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Run ProviderTemplate.exe</para>
          </content>
        </step>
        <step>
          <content>
            <para>Ensure the path to csc.exe is correct. On most windows installations, this is the case</para>
          </content>
        </step>
        <step>
          <content>
            <para>Ensure the path to your MapGuide .net assemblies is correct</para>
          </content>
        </step>
        <step>
          <content>
            <para>Set the MapGuide version to the major.minor.revision version of your MapGuide/AIMS server. This is included in the file name of the compiled assembly</para>
          </content>
        </step>
        <step>
          <content>
            <para>
            Set the MapGuide assembly type. The MapGuide .net API is either monolithic (a single MapGuideDotNetApi.dll) or modular (multiple OSGeo.MapGuide dlls).
            Versions of MapGuide Open Source before 2.2 (or MGE/AIMS 2011) are monolithic. Releases afterwards are modular.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>Optionally tick the <legacyBold>Build Debug</legacyBold> checkbox to build the LocalNative provider in debug mode</para>
          </content>
        </step>
        <step>
          <content>
            <para>Click the <legacyBold>Build</legacyBold> button to build the LocalNative provider assembly. The assembly will be in the <legacyBold>Bin</legacyBold> directory and the supporting dlls will be in the <legacyBold>Lib\MapGuide</legacyBold> directory.</para>
          </content>
        </step>
        <step>
          <content>
            <para>
            Copy the LocalNative provider assembly and its supporting dlls to your application's output directory.
            Edit the ConnectionProviders.xml file to include an entry for your LocalNative provider assembly. The name of the provider must
            be <legacyBold>Maestro.LocalNative</legacyBold> and the type must be <legacyBold>OSGeo.MapGuide.MaestroAPI.LocalNativeConnection</legacyBold>
            </para>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>
    <!-- <codeExample>Optional code example</codeExample> -->
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>